@page
@model back_courrier.Pages.ListeCourrierModel
@addTagHelper*, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Liste des courriers";
}

<div class="row">
    <div class="col-md-9">
        <h1>Liste des courriers @*(@Model.listeCourrierSansPag.Count)*@</h1>
    </div>
        @if (User.IsInRole(ViewData["RecRole"].ToString()))
        {
            <div class="col-md-2">
                <a class="btn btn-primary" href="CreationCourrier">Ajouter courrier</a>
            </div>
        }
    <div class="col-md-1">
        <form method="post">
            <input type="hidden" name="GridHtml" />
            <a href="ListeCourrier?handler=Export&PageNumber=@Model.listeCourrier.PageNumber@(GetQueryString())" class="btn btn-success"> Exporter </a>
        </form>
    </div>
</div>
<div>
    <form method="get" action="/ListeCourrier">
        <div class="row">
            <div class="col-md-4">
                <input name="reference" class="form-control" placeholder="Reference" />
            </div>
            <div class="col-md-4">
                <input name="objet" class="form-control" placeholder="Objet" />
            </div>
            <div class="col-md-4">
                <input name="flag" class="form-control" placeholder="Flag" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <input asp-for="dateCreationStart" class="form-control" placeholder="DateCreationStart" />
            </div>
            <div class="col-md-4">
                <input asp-for="dateCreationEnd" class="form-control" placeholder="DateCreationEnd" />
            </div>
            <div class="col-md-4">
                <input name="statut" class="form-control" placeholder="Statut" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <input name="expediteurExterne" class="form-control" placeholder="Expediteur externe" />
            </div>
            <div class="col-md-4">
                <input name="expediteurInterne" class="form-control" placeholder="Expediteur interne" />
            </div>
            <div class="col-md-4">
                <input name="nomResponsable" class="form-control" placeholder="Nom responsable" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <input name="destinataire" class="form-control" placeholder="Destinataire" />
            </div>
            <div class="col-md-4">
                <input name="commentaire" class="form-control" placeholder="Commentaire" />
            </div>
            <div class="col-md-4">
                <input name="fichier" class="form-control" placeholder="Pièce jointe" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <input name="recepteur" class="form-control" placeholder="Recepteur" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <div class="form-row align-items-center">
                    <button type="submit" class="btn btn-primary">Search</button>
@*                    <input type="reset" class="btn btn-danger" value="Reset">*@
                </div>
            </div>
        </div>
    </form>
</div>

<script type="text/javascript" src="lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $(function () {
        $("#btnSubmit").click(function () {
            $("input[name='GridHtml']").val($("#Grid").html());
        });
    });
</script>

<div id="Grid">
    <table class="table">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                @Html.DisplayNameFor(model => model.listeCourrier.Liste[0].Courrier.Objet)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.listeCourrier.Liste[0].Courrier.Reference)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.listeCourrier.Liste[0].Courrier.Commentaire)
            </th>
            <th>
                Pièce Jointe
            </th>
            <th>
                @Html.DisplayNameFor(model => model.listeCourrier.Liste[0].Courrier.DateCreation)
            </th>
            <th>
                Expéditeur
            </th>
            <th>
                @Html.DisplayNameFor(model => model.listeCourrier.Liste[0].Courrier.Recepteur)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.listeCourrier.Liste[0].Courrier.Flag)
            </th>
            <th>
                Destinataire
            </th>
            <th>
                Status
            </th>
            <th>
                Responsable
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.listeCourrier.Liste)
        {
            <tr>
                <td>
                    <a href="@Url.Page("Historique", new { id = item.Id, idDepartement = item.IdDepartementDestinataire, idStatut = item.IdStatut })">
                        @Html.DisplayFor(modelItem => item.Id)
                    </a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Courrier.Objet)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Courrier.Reference)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Courrier.Commentaire)
                </td>
                <td>
                    @{
                        var fileName = System.IO.Path.GetFileName(item.Courrier.Fichier);
                    }
                    @fileName
                </td>
                <td>
                    @item.Courrier.DateCreation.ToString()

                </td>
                @if (item.Courrier.ExpediteurInterne != null)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Courrier.ExpediteurInterne.Designation)
                    </td>
                }
                else
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Courrier.ExpediteurExterne)
                    </td>
                }

                <td>
                    @Html.DisplayFor(modelItem => item.Courrier.Recepteur.Nom)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Courrier.Flag.Designation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DepartementDestinataire.Designation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Statut.Designation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Responsable.Nom)
                </td>
            </tr>
        }
    </tbody>
</table>
</div>

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @if (Model.listeCourrier.PageNumber > 1)
        {
            <li class="page-item">
                <a class="page-link" href="?pageNumber=1@(GetQueryString())">&laquo;</a>
            </li>
            <li class="page-item">
                <a class="page-link" href="?pageNumber=@(Model.listeCourrier.PageNumber - 1)@(GetQueryString())">&lt;</a>
            </li>
        }

        @for (int i = 1; i <= Model.listeCourrier.TotalPages; i++)
        {
            <li class="page-item @(i == Model.listeCourrier.PageNumber ? "active" : "")">
                <a class="page-link" href="?pageNumber=@i@(GetQueryString())">@i</a>
            </li>
        }

        @if (Model.listeCourrier.PageNumber < Model.listeCourrier.TotalPages)
        {
            <li class="page-item">
                <a class="page-link" href="?pageNumber=@(Model.listeCourrier.PageNumber + 1)@(GetQueryString())">&gt;</a>
            </li>
            <li class="page-item">
                <a class="page-link" href="?pageNumber=@(Model.listeCourrier.TotalPages)@(GetQueryString())">&raquo;</a>
            </li>
        }
    </ul>
</nav>

<script type="text/javascript" src="lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $(function () {
        $("#btnSubmit").click(function () {
            $("input[name='GridHtml']").val($("#Grid").html());
        });
    });
</script>

@functions {
    // Méthode pour obtenir la chaîne de requête des critères de recherche
    private string GetQueryString()
    {
/*        [BindProperty(SupportsGet = true)]
                public DateTime? DateCreationStart { get; set; }
                [BindProperty(SupportsGet = true)]
                public DateTime? DateCreationEnd { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? reference { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? objet { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? expediteurExterne { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? expediteurInterne { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? nomResponsable { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? destinataire { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? commentaire { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? fichier { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? recepteur { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? flag { get; set; }
                [BindProperty(SupportsGet = true)]
                public string? statut { get; set; }*/

        string queryString = "";

        // generate all condition for BindProperty and concatenate them to queryString
        if (Model.dateCreationStart.HasValue)
        {
            queryString += "&dateCreationStart=" + Model.dateCreationStart;
        }

        if (Model.dateCreationEnd.HasValue)
        {
            queryString += "&dateCreationEnd=" + Model.dateCreationEnd;
        }

        if (!string.IsNullOrEmpty(Model.reference))
        {
            queryString += "&reference=" + Model.reference;
        }

        if (!string.IsNullOrEmpty(Model.objet))
        {
            queryString += "&objet=" + Model.objet;
        }

        if (!string.IsNullOrEmpty(Model.expediteurExterne))
        {
            queryString += "&expediteurExterne=" + Model.expediteurExterne;
        }
        
        if (!string.IsNullOrEmpty(Model.expediteurInterne))
        {
            queryString += "&expediteurInterne=" + Model.expediteurInterne;
        }

        if (!string.IsNullOrEmpty(Model.nomResponsable))
        {
            queryString += "&nomResponsable=" + Model.nomResponsable;
        }

        if (!string.IsNullOrEmpty(Model.destinataire))
        {
            queryString += "&destinataire=" + Model.destinataire;
        }

        if (!string.IsNullOrEmpty(Model.commentaire))
        {
            queryString += "&commentaire=" + Model.commentaire;
        }

        if (!string.IsNullOrEmpty(Model.fichier))
        {
            queryString += "&fichier=" + Model.fichier;
        }

        if (!string.IsNullOrEmpty(Model.recepteur))
        {
            queryString += "&recepteur=" + Model.recepteur;
        }

        if (!string.IsNullOrEmpty(Model.flag))
        {
            queryString += "&flag=" + Model.flag;
        }

        if (!string.IsNullOrEmpty(Model.statut))
        {
            queryString += "&statut=" + Model.statut;
        }

        return queryString;
    }
}